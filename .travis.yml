sudo: required
language: cpp


env:
  global:
   - MAKEFLAGS="-j 2"

matrix:
  include:

    - os: linux
      compiler: gcc
      addons: &gcc7
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-7', 'cmake', 'cmake-data']
      env:
        - COMPILERCXX='g++-7'
        - COMPILERC='gcc-7'

  #allow_failures:
  #  - env:
  #      - COMPILERCXX='g++-5'
  #      - COMPILERC='gcc-5'

before_install:
  - sudo apt-get install -y libglew-dev
  - sudo apt-get install libgtk-3-dev
  - sudo apt-get install libudev-dev

install:
  - DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"
  - mkdir ${DEPS_DIR} && cd ${DEPS_DIR}
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      CMAKE_URL="http://www.cmake.org/files/v3.3/cmake-3.3.2-Linux-x86_64.tar.gz"
      mkdir cmake && travis_retry wget --no-check-certificate --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake
      export PATH=${DEPS_DIR}/cmake/bin:${PATH}
    elif [[ "${TRAVIS_OS_NAME}" == "osx" ]]; then
      which cmake || brew install cmake
    fi
  - cd ${TRAVIS_BUILD_DIR}
  ############################################################################
  # Install libc++ and libc++abi (on Linux only; Xcode uses libc++ by default)
  #############################################################################
  #- |
  #  if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
  #    if   [[ "${COMPILERCXX}" == "clang++-3.5" ]]; then LLVM_VERSION="3.5.2"
  #    elif [[ "${COMPILERCXX}" == "clang++-3.6" ]]; then LLVM_VERSION="3.6.2";
  #    elif [[ "${COMPILERCXX}" == "clang++-3.7" ]]; then LLVM_VERSION="3.7.0";
  #    elif [[ "${COMPILERCXX}" == "clang++-3.8" ]]; then LLVM_VERSION="3.8.0";
  #    elif [[ "${COMPILERCXX}" == "clang++-3.9" ]]; then LLVM_VERSION="3.9.0";
  #    elif [[ "${COMPILERCXX}" == "clang++-4.0" ]]; then LLVM_VERSION="4.0.0";
  #    elif [[ "${COMPILERCXX}" == "clang++-5.0" ]]; then LLVM_VERSION="5.0.0"; fi
  #    if [[ "${LLVM_VERSION}" != "" ]]; then
  #      LLVM_URL="http://llvm.org/releases/${LLVM_VERSION}/llvm-${LLVM_VERSION}.src.tar.xz"
  #      LIBCXX_URL="http://llvm.org/releases/${LLVM_VERSION}/libcxx-${LLVM_VERSION}.src.tar.xz"
  #      LIBCXXABI_URL="http://llvm.org/releases/${LLVM_VERSION}/libcxxabi-${LLVM_VERSION}.src.tar.xz"
  #      TAR_FLAGS="-xJ"
  #
  #      mkdir -p llvm llvm/build llvm/projects/libcxx llvm/projects/libcxxabi
  #      travis_retry wget --quiet -O - ${LLVM_URL} | tar --strip-components=1 ${TAR_FLAGS} -C llvm
  #      travis_retry wget --quiet -O - ${LIBCXX_URL} | tar --strip-components=1 ${TAR_FLAGS} -C llvm/projects/libcxx
  #      travis_retry wget --quiet -O - ${LIBCXXABI_URL} | tar --strip-components=1 ${TAR_FLAGS} -C llvm/projects/libcxxabi
  #      (cd llvm/build && cmake .. -DCMAKE_INSTALL_PREFIX=${DEPS_DIR}/llvm/install -DCMAKE_CXX_COMPILER=clang++)
  #      (cd llvm/build/projects/libcxx && make install -j2)
  #      (cd llvm/build/projects/libcxxabi && make install -j2)
  #
  #      export CXXFLAGS="-isystem ${DEPS_DIR}/llvm/install/include/c++/v1"
  #      export LDFLAGS="-L ${DEPS_DIR}/llvm/install/lib -l c++ -l c++abi"
  #      export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${DEPS_DIR}/llvm/install/lib"
  #      export PATH="llvm/clang/bin:${PATH}"
  #    fi
  #  fi

script:
  - git submodule update --init
  - mkdir build
  - cd build
  - cmake -DCMAKE_INSTALL_PREFIX=./install -DCMAKE_C_COMPILER=$COMPILERC -DCMAKE_CXX_COMPILER=$COMPILERCXX ..
  - cmake --build .
